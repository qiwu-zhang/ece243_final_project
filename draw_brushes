#include <stdbool.h>
#include <stdlib.h>

volatile int pixel_buffer_start; 
int black_brush[192] = {
  /*Pixel format: Red: 5 bit, Green: 6 bit, Blue: 5 bit*/
  0x79, 0xce, 0x00, 0x00, 0x00, 0x00, 0xcb, 0x5a, 0xae, 0x73, 0x00, 0x00, 0x00, 0x00, 0xec, 0x62, 
  0xfc, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x63, 
  0xf7, 0xbd, 0x9e, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x92, 0x94, 
  0x7d, 0xef, 0x72, 0x94, 0xbe, 0xf7, 0x9e, 0xf7, 0xff, 0xff, 0x1c, 0xe7, 0xff, 0xff, 0x51, 0x8c, 
  0xff, 0xff, 0x0c, 0x63, 0xff, 0xff, 0x9e, 0xf7, 0xff, 0xff, 0x3d, 0xef, 0xfb, 0xde, 0x35, 0xad, 
  0xff, 0xff, 0xcb, 0x5a, 0xff, 0xff, 0x9e, 0xf7, 0xff, 0xff, 0xdf, 0xff, 0x8e, 0x73, 0xff, 0xff, 
  0xff, 0xff, 0xec, 0x62, 0xff, 0xff, 0x9e, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x8a, 0x52, 0xff, 0xff, 
  0xff, 0xff, 0xbe, 0xf7, 0xcf, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xab, 0x5a, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc7, 0x39, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7b, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x1c, 0xe7, 0x00, 0x00, 0x61, 0x08, 0x28, 0x42, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0xce, 0x41, 0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

int blue_brush[] ={
  0x6e, 0x1a, 0x79, 0x03, 0x78, 0x03, 0x3b, 0x65, 0xfb, 0x5c, 0x78, 0x03, 0x79, 0x03, 0x6e, 0x22, 
  0x2c, 0x22, 0x33, 0x02, 0x32, 0x02, 0xb4, 0x3b, 0x74, 0x33, 0x32, 0x02, 0x33, 0x02, 0x4d, 0x2a, 
  0xef, 0x83, 0xda, 0xe6, 0x79, 0xde, 0xfb, 0xee, 0xfb, 0xe6, 0x79, 0xde, 0xda, 0xe6, 0xef, 0x83, 
  0x31, 0x8c, 0xbf, 0xff, 0x5d, 0xef, 0xff, 0xff, 0xdf, 0xff, 0x5d, 0xef, 0xbf, 0xff, 0x51, 0x8c, 
  0x71, 0x8c, 0x9e, 0xf7, 0x3c, 0xe7, 0xdf, 0xff, 0xbf, 0xff, 0x3c, 0xe7, 0x7e, 0xf7, 0x72, 0x94, 
  0xdb, 0xde, 0xf4, 0xa4, 0x7d, 0xef, 0xdf, 0xff, 0xbf, 0xff, 0x7d, 0xef, 0xd3, 0x9c, 0x1c, 0xe7, 
  0xff, 0xff, 0x4d, 0x6b, 0x9e, 0xf7, 0xdf, 0xff, 0xbf, 0xff, 0x9e, 0xf7, 0x4d, 0x6b, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0x7b, 0x7e, 0xf7, 0xdf, 0xff, 0xdf, 0xff, 0x5d, 0xef, 0xef, 0x7b, 0xff, 0xff, 
  0xff, 0xff, 0xbf, 0xff, 0xcf, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xae, 0x7b, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x51, 0x94, 0x0b, 0x01, 0x0b, 0x01, 0x71, 0x94, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4c, 0x01, 0x4c, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x96, 0xb5, 0xb7, 0xb5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};


	


 void draw_black_brush(){
  int i = 0, j = 0;
  for(int k = 0; k<8*12*2 - 1; k+=2){
    int red = ((black_brush[k+1]) & 0xF8 >> 3) <<11;
    int green = (((black_brush[k] & 0xE0) >>5)) | ((black_brush[k+1] & 0x7) << 3);
    int blue = (black_brush[k] & 0x1F);
    short int p = red | ((green <<  5) | blue);
    plot_pixel(4+i, j, p);
    i+=1;
    if(i == 8){
      i = 0;
      j+=1;
    }
  }
}

void draw_blue_brush(){
  int i = 0, j = 0;
  for(int k = 0; k<8*12*2 - 1; k+=2){
    int red = ((blue_brush[k+1]) & 0xF8 >> 3) <<11;
    int green = (((blue_brush[k] & 0xE0) >>5)) | ((blue_brush[k+1] & 0x7) << 3);
    int blue = (blue_brush[k] & 0x1F);
    short int p = red | ((green <<  5) | blue);
    plot_pixel(20+i, j, p);
    i+=1;
    if(i == 8){
      i = 0;
      j+=1;
    }
  }
}

void clear_screen() {
    for (int x = 0; x < 320; x++) {
        for (int y = 0; y < 240; y++) {
            plot_pixel(x, y, 0xFFFF);//Plotting black pixel all over the VGA display
        }
    }
}

void plot_pixel(int x, int y, short int line_color)
{   
    //Casting the address (32 bits) to a pointer to point to a short int type value (i.e. half-word pixel color)
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

int main(void){
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
  int num = 0;
    /* Read location of the pixel buffer from the pixel buffer controller */
    pixel_buffer_start = *pixel_ctrl_ptr;
  clear_screen();
    draw_black_brush();
	draw_blue_brush();
}

